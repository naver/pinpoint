/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-24")
public class TBusinessLog implements org.apache.thrift.TBase<TBusinessLog, TBusinessLog._Fields>, java.io.Serializable, Cloneable, Comparable<TBusinessLog> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBusinessLog");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COLLECT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("collectInterval", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BUSINESS_LOG_V1S_FIELD_DESC = new org.apache.thrift.protocol.TField("businessLogV1s", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBusinessLogStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBusinessLogTupleSchemeFactory());
  }

  private long timestamp; // optional
  private long collectInterval; // optional
  private List<TBusinessLogV1> businessLogV1s; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    COLLECT_INTERVAL((short)2, "collectInterval"),
    BUSINESS_LOG_V1S((short)10, "businessLogV1s");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // COLLECT_INTERVAL
          return COLLECT_INTERVAL;
        case 10: // BUSINESS_LOG_V1S
          return BUSINESS_LOG_V1S;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __COLLECTINTERVAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.COLLECT_INTERVAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLLECT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("collectInterval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUSINESS_LOG_V1S, new org.apache.thrift.meta_data.FieldMetaData("businessLogV1s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBusinessLogV1.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBusinessLog.class, metaDataMap);
  }

  public TBusinessLog() {
  }

  public TBusinessLog(
    List<TBusinessLogV1> businessLogV1s)
  {
    this();
    this.businessLogV1s = businessLogV1s;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBusinessLog(TBusinessLog other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    this.collectInterval = other.collectInterval;
    if (other.isSetBusinessLogV1s()) {
      List<TBusinessLogV1> __this__businessLogV1s = new ArrayList<TBusinessLogV1>(other.businessLogV1s.size());
      for (TBusinessLogV1 other_element : other.businessLogV1s) {
        __this__businessLogV1s.add(new TBusinessLogV1(other_element));
      }
      this.businessLogV1s = __this__businessLogV1s;
    }
  }

  public TBusinessLog deepCopy() {
    return new TBusinessLog(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    setCollectIntervalIsSet(false);
    this.collectInterval = 0;
    this.businessLogV1s = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getCollectInterval() {
    return this.collectInterval;
  }

  public void setCollectInterval(long collectInterval) {
    this.collectInterval = collectInterval;
    setCollectIntervalIsSet(true);
  }

  public void unsetCollectInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID);
  }

  /** Returns true if field collectInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID);
  }

  public void setCollectIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID, value);
  }

  public int getBusinessLogV1sSize() {
    return (this.businessLogV1s == null) ? 0 : this.businessLogV1s.size();
  }

  public java.util.Iterator<TBusinessLogV1> getBusinessLogV1sIterator() {
    return (this.businessLogV1s == null) ? null : this.businessLogV1s.iterator();
  }

  public void addToBusinessLogV1s(TBusinessLogV1 elem) {
    if (this.businessLogV1s == null) {
      this.businessLogV1s = new ArrayList<TBusinessLogV1>();
    }
    this.businessLogV1s.add(elem);
  }

  public List<TBusinessLogV1> getBusinessLogV1s() {
    return this.businessLogV1s;
  }

  public void setBusinessLogV1s(List<TBusinessLogV1> businessLogV1s) {
    this.businessLogV1s = businessLogV1s;
  }

  public void unsetBusinessLogV1s() {
    this.businessLogV1s = null;
  }

  /** Returns true if field businessLogV1s is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessLogV1s() {
    return this.businessLogV1s != null;
  }

  public void setBusinessLogV1sIsSet(boolean value) {
    if (!value) {
      this.businessLogV1s = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case COLLECT_INTERVAL:
      if (value == null) {
        unsetCollectInterval();
      } else {
        setCollectInterval((Long)value);
      }
      break;

    case BUSINESS_LOG_V1S:
      if (value == null) {
        unsetBusinessLogV1s();
      } else {
        setBusinessLogV1s((List<TBusinessLogV1>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case COLLECT_INTERVAL:
      return Long.valueOf(getCollectInterval());

    case BUSINESS_LOG_V1S:
      return getBusinessLogV1s();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case COLLECT_INTERVAL:
      return isSetCollectInterval();
    case BUSINESS_LOG_V1S:
      return isSetBusinessLogV1s();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBusinessLog)
      return this.equals((TBusinessLog)that);
    return false;
  }

  public boolean equals(TBusinessLog that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_collectInterval = true && this.isSetCollectInterval();
    boolean that_present_collectInterval = true && that.isSetCollectInterval();
    if (this_present_collectInterval || that_present_collectInterval) {
      if (!(this_present_collectInterval && that_present_collectInterval))
        return false;
      if (this.collectInterval != that.collectInterval)
        return false;
    }

    boolean this_present_businessLogV1s = true && this.isSetBusinessLogV1s();
    boolean that_present_businessLogV1s = true && that.isSetBusinessLogV1s();
    if (this_present_businessLogV1s || that_present_businessLogV1s) {
      if (!(this_present_businessLogV1s && that_present_businessLogV1s))
        return false;
      if (!this.businessLogV1s.equals(that.businessLogV1s))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_timestamp = true && (isSetTimestamp());
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_collectInterval = true && (isSetCollectInterval());
    list.add(present_collectInterval);
    if (present_collectInterval)
      list.add(collectInterval);

    boolean present_businessLogV1s = true && (isSetBusinessLogV1s());
    list.add(present_businessLogV1s);
    if (present_businessLogV1s)
      list.add(businessLogV1s);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBusinessLog other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectInterval()).compareTo(other.isSetCollectInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectInterval, other.collectInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessLogV1s()).compareTo(other.isSetBusinessLogV1s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessLogV1s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessLogV1s, other.businessLogV1s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBusinessLog(");
    boolean first = true;

    if (isSetTimestamp()) {
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetCollectInterval()) {
      if (!first) sb.append(", ");
      sb.append("collectInterval:");
      sb.append(this.collectInterval);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("businessLogV1s:");
    if (this.businessLogV1s == null) {
      sb.append("null");
    } else {
      sb.append(this.businessLogV1s);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBusinessLogStandardSchemeFactory implements SchemeFactory {
    public TBusinessLogStandardScheme getScheme() {
      return new TBusinessLogStandardScheme();
    }
  }

  private static class TBusinessLogStandardScheme extends StandardScheme<TBusinessLog> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBusinessLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLLECT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.collectInterval = iprot.readI64();
              struct.setCollectIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BUSINESS_LOG_V1S
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.businessLogV1s = new ArrayList<TBusinessLogV1>(_list40.size);
                TBusinessLogV1 _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new TBusinessLogV1();
                  _elem41.read(iprot);
                  struct.businessLogV1s.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setBusinessLogV1sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBusinessLog struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCollectInterval()) {
        oprot.writeFieldBegin(COLLECT_INTERVAL_FIELD_DESC);
        oprot.writeI64(struct.collectInterval);
        oprot.writeFieldEnd();
      }
      if (struct.businessLogV1s != null) {
        oprot.writeFieldBegin(BUSINESS_LOG_V1S_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.businessLogV1s.size()));
          for (TBusinessLogV1 _iter43 : struct.businessLogV1s)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBusinessLogTupleSchemeFactory implements SchemeFactory {
    public TBusinessLogTupleScheme getScheme() {
      return new TBusinessLogTupleScheme();
    }
  }

  private static class TBusinessLogTupleScheme extends TupleScheme<TBusinessLog> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBusinessLog struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetCollectInterval()) {
        optionals.set(1);
      }
      if (struct.isSetBusinessLogV1s()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetCollectInterval()) {
        oprot.writeI64(struct.collectInterval);
      }
      if (struct.isSetBusinessLogV1s()) {
        {
          oprot.writeI32(struct.businessLogV1s.size());
          for (TBusinessLogV1 _iter44 : struct.businessLogV1s)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBusinessLog struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.collectInterval = iprot.readI64();
        struct.setCollectIntervalIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.businessLogV1s = new ArrayList<TBusinessLogV1>(_list45.size);
          TBusinessLogV1 _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new TBusinessLogV1();
            _elem46.read(iprot);
            struct.businessLogV1s.add(_elem46);
          }
        }
        struct.setBusinessLogV1sIsSet(true);
      }
    }
  }

}

