/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-23")
public class TSpanAndSpanChunkList implements org.apache.thrift.TBase<TSpanAndSpanChunkList, TSpanAndSpanChunkList._Fields>, java.io.Serializable, Cloneable, Comparable<TSpanAndSpanChunkList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSpanAndSpanChunkList");

  private static final org.apache.thrift.protocol.TField SPAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("spanList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SPAN_CHUNK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("spanChunkList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSpanAndSpanChunkListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSpanAndSpanChunkListTupleSchemeFactory());
  }

  private List<TSpan> spanList; // optional
  private List<TSpanChunk> spanChunkList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPAN_LIST((short)1, "spanList"),
    SPAN_CHUNK_LIST((short)2, "spanChunkList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPAN_LIST
          return SPAN_LIST;
        case 2: // SPAN_CHUNK_LIST
          return SPAN_CHUNK_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SPAN_LIST,_Fields.SPAN_CHUNK_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("spanList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpan.class))));
    tmpMap.put(_Fields.SPAN_CHUNK_LIST, new org.apache.thrift.meta_data.FieldMetaData("spanChunkList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpanChunk.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSpanAndSpanChunkList.class, metaDataMap);
  }

  public TSpanAndSpanChunkList() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSpanAndSpanChunkList(TSpanAndSpanChunkList other) {
    if (other.isSetSpanList()) {
      List<TSpan> __this__spanList = new ArrayList<TSpan>(other.spanList.size());
      for (TSpan other_element : other.spanList) {
        __this__spanList.add(new TSpan(other_element));
      }
      this.spanList = __this__spanList;
    }
    if (other.isSetSpanChunkList()) {
      List<TSpanChunk> __this__spanChunkList = new ArrayList<TSpanChunk>(other.spanChunkList.size());
      for (TSpanChunk other_element : other.spanChunkList) {
        __this__spanChunkList.add(new TSpanChunk(other_element));
      }
      this.spanChunkList = __this__spanChunkList;
    }
  }

  public TSpanAndSpanChunkList deepCopy() {
    return new TSpanAndSpanChunkList(this);
  }

  @Override
  public void clear() {
    this.spanList = null;
    this.spanChunkList = null;
  }

  public int getSpanListSize() {
    return (this.spanList == null) ? 0 : this.spanList.size();
  }

  public java.util.Iterator<TSpan> getSpanListIterator() {
    return (this.spanList == null) ? null : this.spanList.iterator();
  }

  public void addToSpanList(TSpan elem) {
    if (this.spanList == null) {
      this.spanList = new ArrayList<TSpan>();
    }
    this.spanList.add(elem);
  }

  public List<TSpan> getSpanList() {
    return this.spanList;
  }

  public void setSpanList(List<TSpan> spanList) {
    this.spanList = spanList;
  }

  public void unsetSpanList() {
    this.spanList = null;
  }

  /** Returns true if field spanList is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanList() {
    return this.spanList != null;
  }

  public void setSpanListIsSet(boolean value) {
    if (!value) {
      this.spanList = null;
    }
  }

  public int getSpanChunkListSize() {
    return (this.spanChunkList == null) ? 0 : this.spanChunkList.size();
  }

  public java.util.Iterator<TSpanChunk> getSpanChunkListIterator() {
    return (this.spanChunkList == null) ? null : this.spanChunkList.iterator();
  }

  public void addToSpanChunkList(TSpanChunk elem) {
    if (this.spanChunkList == null) {
      this.spanChunkList = new ArrayList<TSpanChunk>();
    }
    this.spanChunkList.add(elem);
  }

  public List<TSpanChunk> getSpanChunkList() {
    return this.spanChunkList;
  }

  public void setSpanChunkList(List<TSpanChunk> spanChunkList) {
    this.spanChunkList = spanChunkList;
  }

  public void unsetSpanChunkList() {
    this.spanChunkList = null;
  }

  /** Returns true if field spanChunkList is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanChunkList() {
    return this.spanChunkList != null;
  }

  public void setSpanChunkListIsSet(boolean value) {
    if (!value) {
      this.spanChunkList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPAN_LIST:
      if (value == null) {
        unsetSpanList();
      } else {
        setSpanList((List<TSpan>)value);
      }
      break;

    case SPAN_CHUNK_LIST:
      if (value == null) {
        unsetSpanChunkList();
      } else {
        setSpanChunkList((List<TSpanChunk>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPAN_LIST:
      return getSpanList();

    case SPAN_CHUNK_LIST:
      return getSpanChunkList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPAN_LIST:
      return isSetSpanList();
    case SPAN_CHUNK_LIST:
      return isSetSpanChunkList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSpanAndSpanChunkList)
      return this.equals((TSpanAndSpanChunkList)that);
    return false;
  }

  public boolean equals(TSpanAndSpanChunkList that) {
    if (that == null)
      return false;

    boolean this_present_spanList = true && this.isSetSpanList();
    boolean that_present_spanList = true && that.isSetSpanList();
    if (this_present_spanList || that_present_spanList) {
      if (!(this_present_spanList && that_present_spanList))
        return false;
      if (!this.spanList.equals(that.spanList))
        return false;
    }

    boolean this_present_spanChunkList = true && this.isSetSpanChunkList();
    boolean that_present_spanChunkList = true && that.isSetSpanChunkList();
    if (this_present_spanChunkList || that_present_spanChunkList) {
      if (!(this_present_spanChunkList && that_present_spanChunkList))
        return false;
      if (!this.spanChunkList.equals(that.spanChunkList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_spanList = true && (isSetSpanList());
    list.add(present_spanList);
    if (present_spanList)
      list.add(spanList);

    boolean present_spanChunkList = true && (isSetSpanChunkList());
    list.add(present_spanChunkList);
    if (present_spanChunkList)
      list.add(spanChunkList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSpanAndSpanChunkList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpanList()).compareTo(other.isSetSpanList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanList, other.spanList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanChunkList()).compareTo(other.isSetSpanChunkList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanChunkList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanChunkList, other.spanChunkList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSpanAndSpanChunkList(");
    boolean first = true;

    if (isSetSpanList()) {
      sb.append("spanList:");
      if (this.spanList == null) {
        sb.append("null");
      } else {
        sb.append(this.spanList);
      }
      first = false;
    }
    if (isSetSpanChunkList()) {
      if (!first) sb.append(", ");
      sb.append("spanChunkList:");
      if (this.spanChunkList == null) {
        sb.append("null");
      } else {
        sb.append(this.spanChunkList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSpanAndSpanChunkListStandardSchemeFactory implements SchemeFactory {
    public TSpanAndSpanChunkListStandardScheme getScheme() {
      return new TSpanAndSpanChunkListStandardScheme();
    }
  }

  private static class TSpanAndSpanChunkListStandardScheme extends StandardScheme<TSpanAndSpanChunkList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSpanAndSpanChunkList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPAN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.spanList = new ArrayList<TSpan>(_list32.size);
                TSpan _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new TSpan();
                  _elem33.read(iprot);
                  struct.spanList.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setSpanListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPAN_CHUNK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.spanChunkList = new ArrayList<TSpanChunk>(_list35.size);
                TSpanChunk _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new TSpanChunk();
                  _elem36.read(iprot);
                  struct.spanChunkList.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setSpanChunkListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSpanAndSpanChunkList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.spanList != null) {
        if (struct.isSetSpanList()) {
          oprot.writeFieldBegin(SPAN_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spanList.size()));
            for (TSpan _iter38 : struct.spanList)
            {
              _iter38.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.spanChunkList != null) {
        if (struct.isSetSpanChunkList()) {
          oprot.writeFieldBegin(SPAN_CHUNK_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spanChunkList.size()));
            for (TSpanChunk _iter39 : struct.spanChunkList)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSpanAndSpanChunkListTupleSchemeFactory implements SchemeFactory {
    public TSpanAndSpanChunkListTupleScheme getScheme() {
      return new TSpanAndSpanChunkListTupleScheme();
    }
  }

  private static class TSpanAndSpanChunkListTupleScheme extends TupleScheme<TSpanAndSpanChunkList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSpanAndSpanChunkList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSpanList()) {
        optionals.set(0);
      }
      if (struct.isSetSpanChunkList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSpanList()) {
        {
          oprot.writeI32(struct.spanList.size());
          for (TSpan _iter40 : struct.spanList)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetSpanChunkList()) {
        {
          oprot.writeI32(struct.spanChunkList.size());
          for (TSpanChunk _iter41 : struct.spanChunkList)
          {
            _iter41.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSpanAndSpanChunkList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spanList = new ArrayList<TSpan>(_list42.size);
          TSpan _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = new TSpan();
            _elem43.read(iprot);
            struct.spanList.add(_elem43);
          }
        }
        struct.setSpanListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spanChunkList = new ArrayList<TSpanChunk>(_list45.size);
          TSpanChunk _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new TSpanChunk();
            _elem46.read(iprot);
            struct.spanChunkList.add(_elem46);
          }
        }
        struct.setSpanChunkListIsSet(true);
      }
    }
  }

}

