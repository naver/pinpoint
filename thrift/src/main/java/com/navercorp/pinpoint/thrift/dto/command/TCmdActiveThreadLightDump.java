/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto.command;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-15")
public class TCmdActiveThreadLightDump implements org.apache.thrift.TBase<TCmdActiveThreadLightDump, TCmdActiveThreadLightDump._Fields>, java.io.Serializable, Cloneable, Comparable<TCmdActiveThreadLightDump> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCmdActiveThreadLightDump");

  private static final org.apache.thrift.protocol.TField EXEC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("execTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_THREAD_NAME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("targetThreadNameList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TRACE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("traceIdList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCmdActiveThreadLightDumpStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCmdActiveThreadLightDumpTupleSchemeFactory());
  }

  private long execTime; // optional
  private List<String> targetThreadNameList; // optional
  private List<Long> traceIdList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXEC_TIME((short)1, "execTime"),
    TARGET_THREAD_NAME_LIST((short)2, "targetThreadNameList"),
    TRACE_ID_LIST((short)3, "traceIdList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXEC_TIME
          return EXEC_TIME;
        case 2: // TARGET_THREAD_NAME_LIST
          return TARGET_THREAD_NAME_LIST;
        case 3: // TRACE_ID_LIST
          return TRACE_ID_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXEC_TIME,_Fields.TARGET_THREAD_NAME_LIST,_Fields.TRACE_ID_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXEC_TIME, new org.apache.thrift.meta_data.FieldMetaData("execTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TARGET_THREAD_NAME_LIST, new org.apache.thrift.meta_data.FieldMetaData("targetThreadNameList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRACE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("traceIdList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCmdActiveThreadLightDump.class, metaDataMap);
  }

  public TCmdActiveThreadLightDump() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCmdActiveThreadLightDump(TCmdActiveThreadLightDump other) {
    __isset_bitfield = other.__isset_bitfield;
    this.execTime = other.execTime;
    if (other.isSetTargetThreadNameList()) {
      List<String> __this__targetThreadNameList = new ArrayList<String>(other.targetThreadNameList);
      this.targetThreadNameList = __this__targetThreadNameList;
    }
    if (other.isSetTraceIdList()) {
      List<Long> __this__traceIdList = new ArrayList<Long>(other.traceIdList);
      this.traceIdList = __this__traceIdList;
    }
  }

  public TCmdActiveThreadLightDump deepCopy() {
    return new TCmdActiveThreadLightDump(this);
  }

  @Override
  public void clear() {
    setExecTimeIsSet(false);
    this.execTime = 0;
    this.targetThreadNameList = null;
    this.traceIdList = null;
  }

  public long getExecTime() {
    return this.execTime;
  }

  public void setExecTime(long execTime) {
    this.execTime = execTime;
    setExecTimeIsSet(true);
  }

  public void unsetExecTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECTIME_ISSET_ID);
  }

  /** Returns true if field execTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECTIME_ISSET_ID);
  }

  public void setExecTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECTIME_ISSET_ID, value);
  }

  public int getTargetThreadNameListSize() {
    return (this.targetThreadNameList == null) ? 0 : this.targetThreadNameList.size();
  }

  public java.util.Iterator<String> getTargetThreadNameListIterator() {
    return (this.targetThreadNameList == null) ? null : this.targetThreadNameList.iterator();
  }

  public void addToTargetThreadNameList(String elem) {
    if (this.targetThreadNameList == null) {
      this.targetThreadNameList = new ArrayList<String>();
    }
    this.targetThreadNameList.add(elem);
  }

  public List<String> getTargetThreadNameList() {
    return this.targetThreadNameList;
  }

  public void setTargetThreadNameList(List<String> targetThreadNameList) {
    this.targetThreadNameList = targetThreadNameList;
  }

  public void unsetTargetThreadNameList() {
    this.targetThreadNameList = null;
  }

  /** Returns true if field targetThreadNameList is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetThreadNameList() {
    return this.targetThreadNameList != null;
  }

  public void setTargetThreadNameListIsSet(boolean value) {
    if (!value) {
      this.targetThreadNameList = null;
    }
  }

  public int getTraceIdListSize() {
    return (this.traceIdList == null) ? 0 : this.traceIdList.size();
  }

  public java.util.Iterator<Long> getTraceIdListIterator() {
    return (this.traceIdList == null) ? null : this.traceIdList.iterator();
  }

  public void addToTraceIdList(long elem) {
    if (this.traceIdList == null) {
      this.traceIdList = new ArrayList<Long>();
    }
    this.traceIdList.add(elem);
  }

  public List<Long> getTraceIdList() {
    return this.traceIdList;
  }

  public void setTraceIdList(List<Long> traceIdList) {
    this.traceIdList = traceIdList;
  }

  public void unsetTraceIdList() {
    this.traceIdList = null;
  }

  /** Returns true if field traceIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceIdList() {
    return this.traceIdList != null;
  }

  public void setTraceIdListIsSet(boolean value) {
    if (!value) {
      this.traceIdList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXEC_TIME:
      if (value == null) {
        unsetExecTime();
      } else {
        setExecTime((Long)value);
      }
      break;

    case TARGET_THREAD_NAME_LIST:
      if (value == null) {
        unsetTargetThreadNameList();
      } else {
        setTargetThreadNameList((List<String>)value);
      }
      break;

    case TRACE_ID_LIST:
      if (value == null) {
        unsetTraceIdList();
      } else {
        setTraceIdList((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXEC_TIME:
      return Long.valueOf(getExecTime());

    case TARGET_THREAD_NAME_LIST:
      return getTargetThreadNameList();

    case TRACE_ID_LIST:
      return getTraceIdList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXEC_TIME:
      return isSetExecTime();
    case TARGET_THREAD_NAME_LIST:
      return isSetTargetThreadNameList();
    case TRACE_ID_LIST:
      return isSetTraceIdList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCmdActiveThreadLightDump)
      return this.equals((TCmdActiveThreadLightDump)that);
    return false;
  }

  public boolean equals(TCmdActiveThreadLightDump that) {
    if (that == null)
      return false;

    boolean this_present_execTime = true && this.isSetExecTime();
    boolean that_present_execTime = true && that.isSetExecTime();
    if (this_present_execTime || that_present_execTime) {
      if (!(this_present_execTime && that_present_execTime))
        return false;
      if (this.execTime != that.execTime)
        return false;
    }

    boolean this_present_targetThreadNameList = true && this.isSetTargetThreadNameList();
    boolean that_present_targetThreadNameList = true && that.isSetTargetThreadNameList();
    if (this_present_targetThreadNameList || that_present_targetThreadNameList) {
      if (!(this_present_targetThreadNameList && that_present_targetThreadNameList))
        return false;
      if (!this.targetThreadNameList.equals(that.targetThreadNameList))
        return false;
    }

    boolean this_present_traceIdList = true && this.isSetTraceIdList();
    boolean that_present_traceIdList = true && that.isSetTraceIdList();
    if (this_present_traceIdList || that_present_traceIdList) {
      if (!(this_present_traceIdList && that_present_traceIdList))
        return false;
      if (!this.traceIdList.equals(that.traceIdList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_execTime = true && (isSetExecTime());
    list.add(present_execTime);
    if (present_execTime)
      list.add(execTime);

    boolean present_targetThreadNameList = true && (isSetTargetThreadNameList());
    list.add(present_targetThreadNameList);
    if (present_targetThreadNameList)
      list.add(targetThreadNameList);

    boolean present_traceIdList = true && (isSetTraceIdList());
    list.add(present_traceIdList);
    if (present_traceIdList)
      list.add(traceIdList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCmdActiveThreadLightDump other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecTime()).compareTo(other.isSetExecTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTime, other.execTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetThreadNameList()).compareTo(other.isSetTargetThreadNameList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetThreadNameList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetThreadNameList, other.targetThreadNameList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceIdList()).compareTo(other.isSetTraceIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceIdList, other.traceIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCmdActiveThreadLightDump(");
    boolean first = true;

    if (isSetExecTime()) {
      sb.append("execTime:");
      sb.append(this.execTime);
      first = false;
    }
    if (isSetTargetThreadNameList()) {
      if (!first) sb.append(", ");
      sb.append("targetThreadNameList:");
      if (this.targetThreadNameList == null) {
        sb.append("null");
      } else {
        sb.append(this.targetThreadNameList);
      }
      first = false;
    }
    if (isSetTraceIdList()) {
      if (!first) sb.append(", ");
      sb.append("traceIdList:");
      if (this.traceIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.traceIdList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCmdActiveThreadLightDumpStandardSchemeFactory implements SchemeFactory {
    public TCmdActiveThreadLightDumpStandardScheme getScheme() {
      return new TCmdActiveThreadLightDumpStandardScheme();
    }
  }

  private static class TCmdActiveThreadLightDumpStandardScheme extends StandardScheme<TCmdActiveThreadLightDump> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCmdActiveThreadLightDump struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXEC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execTime = iprot.readI64();
              struct.setExecTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET_THREAD_NAME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.targetThreadNameList = new ArrayList<String>(_list56.size);
                String _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = iprot.readString();
                  struct.targetThreadNameList.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setTargetThreadNameListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRACE_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.traceIdList = new ArrayList<Long>(_list59.size);
                long _elem60;
                for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                {
                  _elem60 = iprot.readI64();
                  struct.traceIdList.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setTraceIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCmdActiveThreadLightDump struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetExecTime()) {
        oprot.writeFieldBegin(EXEC_TIME_FIELD_DESC);
        oprot.writeI64(struct.execTime);
        oprot.writeFieldEnd();
      }
      if (struct.targetThreadNameList != null) {
        if (struct.isSetTargetThreadNameList()) {
          oprot.writeFieldBegin(TARGET_THREAD_NAME_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.targetThreadNameList.size()));
            for (String _iter62 : struct.targetThreadNameList)
            {
              oprot.writeString(_iter62);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceIdList != null) {
        if (struct.isSetTraceIdList()) {
          oprot.writeFieldBegin(TRACE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.traceIdList.size()));
            for (long _iter63 : struct.traceIdList)
            {
              oprot.writeI64(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCmdActiveThreadLightDumpTupleSchemeFactory implements SchemeFactory {
    public TCmdActiveThreadLightDumpTupleScheme getScheme() {
      return new TCmdActiveThreadLightDumpTupleScheme();
    }
  }

  private static class TCmdActiveThreadLightDumpTupleScheme extends TupleScheme<TCmdActiveThreadLightDump> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCmdActiveThreadLightDump struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExecTime()) {
        optionals.set(0);
      }
      if (struct.isSetTargetThreadNameList()) {
        optionals.set(1);
      }
      if (struct.isSetTraceIdList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExecTime()) {
        oprot.writeI64(struct.execTime);
      }
      if (struct.isSetTargetThreadNameList()) {
        {
          oprot.writeI32(struct.targetThreadNameList.size());
          for (String _iter64 : struct.targetThreadNameList)
          {
            oprot.writeString(_iter64);
          }
        }
      }
      if (struct.isSetTraceIdList()) {
        {
          oprot.writeI32(struct.traceIdList.size());
          for (long _iter65 : struct.traceIdList)
          {
            oprot.writeI64(_iter65);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCmdActiveThreadLightDump struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.execTime = iprot.readI64();
        struct.setExecTimeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.targetThreadNameList = new ArrayList<String>(_list66.size);
          String _elem67;
          for (int _i68 = 0; _i68 < _list66.size; ++_i68)
          {
            _elem67 = iprot.readString();
            struct.targetThreadNameList.add(_elem67);
          }
        }
        struct.setTargetThreadNameListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.traceIdList = new ArrayList<Long>(_list69.size);
          long _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = iprot.readI64();
            struct.traceIdList.add(_elem70);
          }
        }
        struct.setTraceIdListIsSet(true);
      }
    }
  }

}

