/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-9-12")
public class TPassiveSpan implements org.apache.thrift.TBase<TPassiveSpan, TPassiveSpan._Fields>, java.io.Serializable, Cloneable, Comparable<TPassiveSpan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPassiveSpan");

  private static final org.apache.thrift.protocol.TField PASSIVE_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("passiveSpanId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AGENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("agentType", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField AGENT_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("agentStartTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PROXY_FRONT_END_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("proxyFrontEndSpanId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PROXY_BACK_END_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("proxyBackEndSpanId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ELAPSED_FIELD_DESC = new org.apache.thrift.protocol.TField("elapsed", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I16, (short)9);
  private static final org.apache.thrift.protocol.TField END_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endPoint", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ANNOTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("annotations", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SPAN_EVENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("spanEventList", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField API_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("apiId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField RPC_FIELD_DESC = new org.apache.thrift.protocol.TField("rpc", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPassiveSpanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPassiveSpanTupleSchemeFactory());
  }

  private long passiveSpanId; // required
  private short agentType; // required
  private long agentStartTime; // required
  private long proxyFrontEndSpanId; // required
  private long proxyBackEndSpanId; // required
  private ByteBuffer transactionId; // required
  private long startTime; // required
  private int elapsed; // optional
  private short serviceType; // required
  private String endPoint; // optional
  private String remoteAddr; // optional
  private List<TAnnotation> annotations; // optional
  private short flag; // optional
  private int err; // optional
  private List<TSpanEvent> spanEventList; // optional
  private int apiId; // optional
  private String rpc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PASSIVE_SPAN_ID((short)1, "passiveSpanId"),
    AGENT_TYPE((short)2, "agentType"),
    AGENT_START_TIME((short)3, "agentStartTime"),
    PROXY_FRONT_END_SPAN_ID((short)4, "proxyFrontEndSpanId"),
    PROXY_BACK_END_SPAN_ID((short)5, "proxyBackEndSpanId"),
    TRANSACTION_ID((short)6, "transactionId"),
    START_TIME((short)7, "startTime"),
    ELAPSED((short)8, "elapsed"),
    SERVICE_TYPE((short)9, "serviceType"),
    END_POINT((short)10, "endPoint"),
    REMOTE_ADDR((short)11, "remoteAddr"),
    ANNOTATIONS((short)12, "annotations"),
    FLAG((short)13, "flag"),
    ERR((short)14, "err"),
    SPAN_EVENT_LIST((short)15, "spanEventList"),
    API_ID((short)16, "apiId"),
    RPC((short)17, "rpc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PASSIVE_SPAN_ID
          return PASSIVE_SPAN_ID;
        case 2: // AGENT_TYPE
          return AGENT_TYPE;
        case 3: // AGENT_START_TIME
          return AGENT_START_TIME;
        case 4: // PROXY_FRONT_END_SPAN_ID
          return PROXY_FRONT_END_SPAN_ID;
        case 5: // PROXY_BACK_END_SPAN_ID
          return PROXY_BACK_END_SPAN_ID;
        case 6: // TRANSACTION_ID
          return TRANSACTION_ID;
        case 7: // START_TIME
          return START_TIME;
        case 8: // ELAPSED
          return ELAPSED;
        case 9: // SERVICE_TYPE
          return SERVICE_TYPE;
        case 10: // END_POINT
          return END_POINT;
        case 11: // REMOTE_ADDR
          return REMOTE_ADDR;
        case 12: // ANNOTATIONS
          return ANNOTATIONS;
        case 13: // FLAG
          return FLAG;
        case 14: // ERR
          return ERR;
        case 15: // SPAN_EVENT_LIST
          return SPAN_EVENT_LIST;
        case 16: // API_ID
          return API_ID;
        case 17: // RPC
          return RPC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PASSIVESPANID_ISSET_ID = 0;
  private static final int __AGENTTYPE_ISSET_ID = 1;
  private static final int __AGENTSTARTTIME_ISSET_ID = 2;
  private static final int __PROXYFRONTENDSPANID_ISSET_ID = 3;
  private static final int __PROXYBACKENDSPANID_ISSET_ID = 4;
  private static final int __STARTTIME_ISSET_ID = 5;
  private static final int __ELAPSED_ISSET_ID = 6;
  private static final int __SERVICETYPE_ISSET_ID = 7;
  private static final int __FLAG_ISSET_ID = 8;
  private static final int __ERR_ISSET_ID = 9;
  private static final int __APIID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ELAPSED,_Fields.END_POINT,_Fields.REMOTE_ADDR,_Fields.ANNOTATIONS,_Fields.FLAG,_Fields.ERR,_Fields.SPAN_EVENT_LIST,_Fields.API_ID,_Fields.RPC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PASSIVE_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("passiveSpanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("agentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.AGENT_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("agentStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROXY_FRONT_END_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("proxyFrontEndSpanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROXY_BACK_END_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("proxyBackEndSpanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transactionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ELAPSED, new org.apache.thrift.meta_data.FieldMetaData("elapsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.END_POINT, new org.apache.thrift.meta_data.FieldMetaData("endPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("remoteAddr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANNOTATIONS, new org.apache.thrift.meta_data.FieldMetaData("annotations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAnnotation.class))));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPAN_EVENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("spanEventList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpanEvent.class))));
    tmpMap.put(_Fields.API_ID, new org.apache.thrift.meta_data.FieldMetaData("apiId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RPC, new org.apache.thrift.meta_data.FieldMetaData("rpc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPassiveSpan.class, metaDataMap);
  }

  public TPassiveSpan() {
    this.elapsed = 0;

    this.flag = (short)0;

  }

  public TPassiveSpan(
    long passiveSpanId,
    short agentType,
    long agentStartTime,
    long proxyFrontEndSpanId,
    long proxyBackEndSpanId,
    ByteBuffer transactionId,
    long startTime,
    short serviceType)
  {
    this();
    this.passiveSpanId = passiveSpanId;
    setPassiveSpanIdIsSet(true);
    this.agentType = agentType;
    setAgentTypeIsSet(true);
    this.agentStartTime = agentStartTime;
    setAgentStartTimeIsSet(true);
    this.proxyFrontEndSpanId = proxyFrontEndSpanId;
    setProxyFrontEndSpanIdIsSet(true);
    this.proxyBackEndSpanId = proxyBackEndSpanId;
    setProxyBackEndSpanIdIsSet(true);
    this.transactionId = org.apache.thrift.TBaseHelper.copyBinary(transactionId);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.serviceType = serviceType;
    setServiceTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPassiveSpan(TPassiveSpan other) {
    __isset_bitfield = other.__isset_bitfield;
    this.passiveSpanId = other.passiveSpanId;
    this.agentType = other.agentType;
    this.agentStartTime = other.agentStartTime;
    this.proxyFrontEndSpanId = other.proxyFrontEndSpanId;
    this.proxyBackEndSpanId = other.proxyBackEndSpanId;
    if (other.isSetTransactionId()) {
      this.transactionId = org.apache.thrift.TBaseHelper.copyBinary(other.transactionId);
    }
    this.startTime = other.startTime;
    this.elapsed = other.elapsed;
    this.serviceType = other.serviceType;
    if (other.isSetEndPoint()) {
      this.endPoint = other.endPoint;
    }
    if (other.isSetRemoteAddr()) {
      this.remoteAddr = other.remoteAddr;
    }
    if (other.isSetAnnotations()) {
      List<TAnnotation> __this__annotations = new ArrayList<TAnnotation>(other.annotations.size());
      for (TAnnotation other_element : other.annotations) {
        __this__annotations.add(new TAnnotation(other_element));
      }
      this.annotations = __this__annotations;
    }
    this.flag = other.flag;
    this.err = other.err;
    if (other.isSetSpanEventList()) {
      List<TSpanEvent> __this__spanEventList = new ArrayList<TSpanEvent>(other.spanEventList.size());
      for (TSpanEvent other_element : other.spanEventList) {
        __this__spanEventList.add(new TSpanEvent(other_element));
      }
      this.spanEventList = __this__spanEventList;
    }
    this.apiId = other.apiId;
    if (other.isSetRpc()) {
      this.rpc = other.rpc;
    }
  }

  public TPassiveSpan deepCopy() {
    return new TPassiveSpan(this);
  }

  @Override
  public void clear() {
    setPassiveSpanIdIsSet(false);
    this.passiveSpanId = 0;
    setAgentTypeIsSet(false);
    this.agentType = 0;
    setAgentStartTimeIsSet(false);
    this.agentStartTime = 0;
    setProxyFrontEndSpanIdIsSet(false);
    this.proxyFrontEndSpanId = 0;
    setProxyBackEndSpanIdIsSet(false);
    this.proxyBackEndSpanId = 0;
    this.transactionId = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    this.elapsed = 0;

    setServiceTypeIsSet(false);
    this.serviceType = 0;
    this.endPoint = null;
    this.remoteAddr = null;
    this.annotations = null;
    this.flag = (short)0;

    setErrIsSet(false);
    this.err = 0;
    this.spanEventList = null;
    setApiIdIsSet(false);
    this.apiId = 0;
    this.rpc = null;
  }

  public long getPassiveSpanId() {
    return this.passiveSpanId;
  }

  public void setPassiveSpanId(long passiveSpanId) {
    this.passiveSpanId = passiveSpanId;
    setPassiveSpanIdIsSet(true);
  }

  public void unsetPassiveSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PASSIVESPANID_ISSET_ID);
  }

  /** Returns true if field passiveSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetPassiveSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __PASSIVESPANID_ISSET_ID);
  }

  public void setPassiveSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PASSIVESPANID_ISSET_ID, value);
  }

  public short getAgentType() {
    return this.agentType;
  }

  public void setAgentType(short agentType) {
    this.agentType = agentType;
    setAgentTypeIsSet(true);
  }

  public void unsetAgentType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGENTTYPE_ISSET_ID);
  }

  /** Returns true if field agentType is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentType() {
    return EncodingUtils.testBit(__isset_bitfield, __AGENTTYPE_ISSET_ID);
  }

  public void setAgentTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGENTTYPE_ISSET_ID, value);
  }

  public long getAgentStartTime() {
    return this.agentStartTime;
  }

  public void setAgentStartTime(long agentStartTime) {
    this.agentStartTime = agentStartTime;
    setAgentStartTimeIsSet(true);
  }

  public void unsetAgentStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGENTSTARTTIME_ISSET_ID);
  }

  /** Returns true if field agentStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __AGENTSTARTTIME_ISSET_ID);
  }

  public void setAgentStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGENTSTARTTIME_ISSET_ID, value);
  }

  public long getProxyFrontEndSpanId() {
    return this.proxyFrontEndSpanId;
  }

  public void setProxyFrontEndSpanId(long proxyFrontEndSpanId) {
    this.proxyFrontEndSpanId = proxyFrontEndSpanId;
    setProxyFrontEndSpanIdIsSet(true);
  }

  public void unsetProxyFrontEndSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROXYFRONTENDSPANID_ISSET_ID);
  }

  /** Returns true if field proxyFrontEndSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetProxyFrontEndSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROXYFRONTENDSPANID_ISSET_ID);
  }

  public void setProxyFrontEndSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROXYFRONTENDSPANID_ISSET_ID, value);
  }

  public long getProxyBackEndSpanId() {
    return this.proxyBackEndSpanId;
  }

  public void setProxyBackEndSpanId(long proxyBackEndSpanId) {
    this.proxyBackEndSpanId = proxyBackEndSpanId;
    setProxyBackEndSpanIdIsSet(true);
  }

  public void unsetProxyBackEndSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROXYBACKENDSPANID_ISSET_ID);
  }

  /** Returns true if field proxyBackEndSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetProxyBackEndSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROXYBACKENDSPANID_ISSET_ID);
  }

  public void setProxyBackEndSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROXYBACKENDSPANID_ISSET_ID, value);
  }

  public byte[] getTransactionId() {
    setTransactionId(org.apache.thrift.TBaseHelper.rightSize(transactionId));
    return transactionId == null ? null : transactionId.array();
  }

  public ByteBuffer bufferForTransactionId() {
    return org.apache.thrift.TBaseHelper.copyBinary(transactionId);
  }

  public void setTransactionId(byte[] transactionId) {
    this.transactionId = transactionId == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(transactionId, transactionId.length));
  }

  public void setTransactionId(ByteBuffer transactionId) {
    this.transactionId = org.apache.thrift.TBaseHelper.copyBinary(transactionId);
  }

  public void unsetTransactionId() {
    this.transactionId = null;
  }

  /** Returns true if field transactionId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionId() {
    return this.transactionId != null;
  }

  public void setTransactionIdIsSet(boolean value) {
    if (!value) {
      this.transactionId = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public void setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public int getElapsed() {
    return this.elapsed;
  }

  public void setElapsed(int elapsed) {
    this.elapsed = elapsed;
    setElapsedIsSet(true);
  }

  public void unsetElapsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ELAPSED_ISSET_ID);
  }

  /** Returns true if field elapsed is set (has been assigned a value) and false otherwise */
  public boolean isSetElapsed() {
    return EncodingUtils.testBit(__isset_bitfield, __ELAPSED_ISSET_ID);
  }

  public void setElapsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ELAPSED_ISSET_ID, value);
  }

  public short getServiceType() {
    return this.serviceType;
  }

  public void setServiceType(short serviceType) {
    this.serviceType = serviceType;
    setServiceTypeIsSet(true);
  }

  public void unsetServiceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
  }

  /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceType() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
  }

  public void setServiceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICETYPE_ISSET_ID, value);
  }

  public String getEndPoint() {
    return this.endPoint;
  }

  public void setEndPoint(String endPoint) {
    this.endPoint = endPoint;
  }

  public void unsetEndPoint() {
    this.endPoint = null;
  }

  /** Returns true if field endPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndPoint() {
    return this.endPoint != null;
  }

  public void setEndPointIsSet(boolean value) {
    if (!value) {
      this.endPoint = null;
    }
  }

  public String getRemoteAddr() {
    return this.remoteAddr;
  }

  public void setRemoteAddr(String remoteAddr) {
    this.remoteAddr = remoteAddr;
  }

  public void unsetRemoteAddr() {
    this.remoteAddr = null;
  }

  /** Returns true if field remoteAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAddr() {
    return this.remoteAddr != null;
  }

  public void setRemoteAddrIsSet(boolean value) {
    if (!value) {
      this.remoteAddr = null;
    }
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator<TAnnotation> getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(TAnnotation elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<TAnnotation>();
    }
    this.annotations.add(elem);
  }

  public List<TAnnotation> getAnnotations() {
    return this.annotations;
  }

  public void setAnnotations(List<TAnnotation> annotations) {
    this.annotations = annotations;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public short getFlag() {
    return this.flag;
  }

  public void setFlag(short flag) {
    this.flag = flag;
    setFlagIsSet(true);
  }

  public void unsetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public int getErr() {
    return this.err;
  }

  public void setErr(int err) {
    this.err = err;
    setErrIsSet(true);
  }

  public void unsetErr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERR_ISSET_ID);
  }

  /** Returns true if field err is set (has been assigned a value) and false otherwise */
  public boolean isSetErr() {
    return EncodingUtils.testBit(__isset_bitfield, __ERR_ISSET_ID);
  }

  public void setErrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERR_ISSET_ID, value);
  }

  public int getSpanEventListSize() {
    return (this.spanEventList == null) ? 0 : this.spanEventList.size();
  }

  public java.util.Iterator<TSpanEvent> getSpanEventListIterator() {
    return (this.spanEventList == null) ? null : this.spanEventList.iterator();
  }

  public void addToSpanEventList(TSpanEvent elem) {
    if (this.spanEventList == null) {
      this.spanEventList = new ArrayList<TSpanEvent>();
    }
    this.spanEventList.add(elem);
  }

  public List<TSpanEvent> getSpanEventList() {
    return this.spanEventList;
  }

  public void setSpanEventList(List<TSpanEvent> spanEventList) {
    this.spanEventList = spanEventList;
  }

  public void unsetSpanEventList() {
    this.spanEventList = null;
  }

  /** Returns true if field spanEventList is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanEventList() {
    return this.spanEventList != null;
  }

  public void setSpanEventListIsSet(boolean value) {
    if (!value) {
      this.spanEventList = null;
    }
  }

  public int getApiId() {
    return this.apiId;
  }

  public void setApiId(int apiId) {
    this.apiId = apiId;
    setApiIdIsSet(true);
  }

  public void unsetApiId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APIID_ISSET_ID);
  }

  /** Returns true if field apiId is set (has been assigned a value) and false otherwise */
  public boolean isSetApiId() {
    return EncodingUtils.testBit(__isset_bitfield, __APIID_ISSET_ID);
  }

  public void setApiIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APIID_ISSET_ID, value);
  }

  public String getRpc() {
    return this.rpc;
  }

  public void setRpc(String rpc) {
    this.rpc = rpc;
  }

  public void unsetRpc() {
    this.rpc = null;
  }

  /** Returns true if field rpc is set (has been assigned a value) and false otherwise */
  public boolean isSetRpc() {
    return this.rpc != null;
  }

  public void setRpcIsSet(boolean value) {
    if (!value) {
      this.rpc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PASSIVE_SPAN_ID:
      if (value == null) {
        unsetPassiveSpanId();
      } else {
        setPassiveSpanId((Long)value);
      }
      break;

    case AGENT_TYPE:
      if (value == null) {
        unsetAgentType();
      } else {
        setAgentType((Short)value);
      }
      break;

    case AGENT_START_TIME:
      if (value == null) {
        unsetAgentStartTime();
      } else {
        setAgentStartTime((Long)value);
      }
      break;

    case PROXY_FRONT_END_SPAN_ID:
      if (value == null) {
        unsetProxyFrontEndSpanId();
      } else {
        setProxyFrontEndSpanId((Long)value);
      }
      break;

    case PROXY_BACK_END_SPAN_ID:
      if (value == null) {
        unsetProxyBackEndSpanId();
      } else {
        setProxyBackEndSpanId((Long)value);
      }
      break;

    case TRANSACTION_ID:
      if (value == null) {
        unsetTransactionId();
      } else {
        setTransactionId((ByteBuffer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case ELAPSED:
      if (value == null) {
        unsetElapsed();
      } else {
        setElapsed((Integer)value);
      }
      break;

    case SERVICE_TYPE:
      if (value == null) {
        unsetServiceType();
      } else {
        setServiceType((Short)value);
      }
      break;

    case END_POINT:
      if (value == null) {
        unsetEndPoint();
      } else {
        setEndPoint((String)value);
      }
      break;

    case REMOTE_ADDR:
      if (value == null) {
        unsetRemoteAddr();
      } else {
        setRemoteAddr((String)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((List<TAnnotation>)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Short)value);
      }
      break;

    case ERR:
      if (value == null) {
        unsetErr();
      } else {
        setErr((Integer)value);
      }
      break;

    case SPAN_EVENT_LIST:
      if (value == null) {
        unsetSpanEventList();
      } else {
        setSpanEventList((List<TSpanEvent>)value);
      }
      break;

    case API_ID:
      if (value == null) {
        unsetApiId();
      } else {
        setApiId((Integer)value);
      }
      break;

    case RPC:
      if (value == null) {
        unsetRpc();
      } else {
        setRpc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PASSIVE_SPAN_ID:
      return Long.valueOf(getPassiveSpanId());

    case AGENT_TYPE:
      return Short.valueOf(getAgentType());

    case AGENT_START_TIME:
      return Long.valueOf(getAgentStartTime());

    case PROXY_FRONT_END_SPAN_ID:
      return Long.valueOf(getProxyFrontEndSpanId());

    case PROXY_BACK_END_SPAN_ID:
      return Long.valueOf(getProxyBackEndSpanId());

    case TRANSACTION_ID:
      return getTransactionId();

    case START_TIME:
      return Long.valueOf(getStartTime());

    case ELAPSED:
      return Integer.valueOf(getElapsed());

    case SERVICE_TYPE:
      return Short.valueOf(getServiceType());

    case END_POINT:
      return getEndPoint();

    case REMOTE_ADDR:
      return getRemoteAddr();

    case ANNOTATIONS:
      return getAnnotations();

    case FLAG:
      return Short.valueOf(getFlag());

    case ERR:
      return Integer.valueOf(getErr());

    case SPAN_EVENT_LIST:
      return getSpanEventList();

    case API_ID:
      return Integer.valueOf(getApiId());

    case RPC:
      return getRpc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PASSIVE_SPAN_ID:
      return isSetPassiveSpanId();
    case AGENT_TYPE:
      return isSetAgentType();
    case AGENT_START_TIME:
      return isSetAgentStartTime();
    case PROXY_FRONT_END_SPAN_ID:
      return isSetProxyFrontEndSpanId();
    case PROXY_BACK_END_SPAN_ID:
      return isSetProxyBackEndSpanId();
    case TRANSACTION_ID:
      return isSetTransactionId();
    case START_TIME:
      return isSetStartTime();
    case ELAPSED:
      return isSetElapsed();
    case SERVICE_TYPE:
      return isSetServiceType();
    case END_POINT:
      return isSetEndPoint();
    case REMOTE_ADDR:
      return isSetRemoteAddr();
    case ANNOTATIONS:
      return isSetAnnotations();
    case FLAG:
      return isSetFlag();
    case ERR:
      return isSetErr();
    case SPAN_EVENT_LIST:
      return isSetSpanEventList();
    case API_ID:
      return isSetApiId();
    case RPC:
      return isSetRpc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPassiveSpan)
      return this.equals((TPassiveSpan)that);
    return false;
  }

  public boolean equals(TPassiveSpan that) {
    if (that == null)
      return false;

    boolean this_present_passiveSpanId = true;
    boolean that_present_passiveSpanId = true;
    if (this_present_passiveSpanId || that_present_passiveSpanId) {
      if (!(this_present_passiveSpanId && that_present_passiveSpanId))
        return false;
      if (this.passiveSpanId != that.passiveSpanId)
        return false;
    }

    boolean this_present_agentType = true;
    boolean that_present_agentType = true;
    if (this_present_agentType || that_present_agentType) {
      if (!(this_present_agentType && that_present_agentType))
        return false;
      if (this.agentType != that.agentType)
        return false;
    }

    boolean this_present_agentStartTime = true;
    boolean that_present_agentStartTime = true;
    if (this_present_agentStartTime || that_present_agentStartTime) {
      if (!(this_present_agentStartTime && that_present_agentStartTime))
        return false;
      if (this.agentStartTime != that.agentStartTime)
        return false;
    }

    boolean this_present_proxyFrontEndSpanId = true;
    boolean that_present_proxyFrontEndSpanId = true;
    if (this_present_proxyFrontEndSpanId || that_present_proxyFrontEndSpanId) {
      if (!(this_present_proxyFrontEndSpanId && that_present_proxyFrontEndSpanId))
        return false;
      if (this.proxyFrontEndSpanId != that.proxyFrontEndSpanId)
        return false;
    }

    boolean this_present_proxyBackEndSpanId = true;
    boolean that_present_proxyBackEndSpanId = true;
    if (this_present_proxyBackEndSpanId || that_present_proxyBackEndSpanId) {
      if (!(this_present_proxyBackEndSpanId && that_present_proxyBackEndSpanId))
        return false;
      if (this.proxyBackEndSpanId != that.proxyBackEndSpanId)
        return false;
    }

    boolean this_present_transactionId = true && this.isSetTransactionId();
    boolean that_present_transactionId = true && that.isSetTransactionId();
    if (this_present_transactionId || that_present_transactionId) {
      if (!(this_present_transactionId && that_present_transactionId))
        return false;
      if (!this.transactionId.equals(that.transactionId))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_elapsed = true && this.isSetElapsed();
    boolean that_present_elapsed = true && that.isSetElapsed();
    if (this_present_elapsed || that_present_elapsed) {
      if (!(this_present_elapsed && that_present_elapsed))
        return false;
      if (this.elapsed != that.elapsed)
        return false;
    }

    boolean this_present_serviceType = true;
    boolean that_present_serviceType = true;
    if (this_present_serviceType || that_present_serviceType) {
      if (!(this_present_serviceType && that_present_serviceType))
        return false;
      if (this.serviceType != that.serviceType)
        return false;
    }

    boolean this_present_endPoint = true && this.isSetEndPoint();
    boolean that_present_endPoint = true && that.isSetEndPoint();
    if (this_present_endPoint || that_present_endPoint) {
      if (!(this_present_endPoint && that_present_endPoint))
        return false;
      if (!this.endPoint.equals(that.endPoint))
        return false;
    }

    boolean this_present_remoteAddr = true && this.isSetRemoteAddr();
    boolean that_present_remoteAddr = true && that.isSetRemoteAddr();
    if (this_present_remoteAddr || that_present_remoteAddr) {
      if (!(this_present_remoteAddr && that_present_remoteAddr))
        return false;
      if (!this.remoteAddr.equals(that.remoteAddr))
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_err = true && this.isSetErr();
    boolean that_present_err = true && that.isSetErr();
    if (this_present_err || that_present_err) {
      if (!(this_present_err && that_present_err))
        return false;
      if (this.err != that.err)
        return false;
    }

    boolean this_present_spanEventList = true && this.isSetSpanEventList();
    boolean that_present_spanEventList = true && that.isSetSpanEventList();
    if (this_present_spanEventList || that_present_spanEventList) {
      if (!(this_present_spanEventList && that_present_spanEventList))
        return false;
      if (!this.spanEventList.equals(that.spanEventList))
        return false;
    }

    boolean this_present_apiId = true && this.isSetApiId();
    boolean that_present_apiId = true && that.isSetApiId();
    if (this_present_apiId || that_present_apiId) {
      if (!(this_present_apiId && that_present_apiId))
        return false;
      if (this.apiId != that.apiId)
        return false;
    }

    boolean this_present_rpc = true && this.isSetRpc();
    boolean that_present_rpc = true && that.isSetRpc();
    if (this_present_rpc || that_present_rpc) {
      if (!(this_present_rpc && that_present_rpc))
        return false;
      if (!this.rpc.equals(that.rpc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_passiveSpanId = true;
    list.add(present_passiveSpanId);
    if (present_passiveSpanId)
      list.add(passiveSpanId);

    boolean present_agentType = true;
    list.add(present_agentType);
    if (present_agentType)
      list.add(agentType);

    boolean present_agentStartTime = true;
    list.add(present_agentStartTime);
    if (present_agentStartTime)
      list.add(agentStartTime);

    boolean present_proxyFrontEndSpanId = true;
    list.add(present_proxyFrontEndSpanId);
    if (present_proxyFrontEndSpanId)
      list.add(proxyFrontEndSpanId);

    boolean present_proxyBackEndSpanId = true;
    list.add(present_proxyBackEndSpanId);
    if (present_proxyBackEndSpanId)
      list.add(proxyBackEndSpanId);

    boolean present_transactionId = true && (isSetTransactionId());
    list.add(present_transactionId);
    if (present_transactionId)
      list.add(transactionId);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_elapsed = true && (isSetElapsed());
    list.add(present_elapsed);
    if (present_elapsed)
      list.add(elapsed);

    boolean present_serviceType = true;
    list.add(present_serviceType);
    if (present_serviceType)
      list.add(serviceType);

    boolean present_endPoint = true && (isSetEndPoint());
    list.add(present_endPoint);
    if (present_endPoint)
      list.add(endPoint);

    boolean present_remoteAddr = true && (isSetRemoteAddr());
    list.add(present_remoteAddr);
    if (present_remoteAddr)
      list.add(remoteAddr);

    boolean present_annotations = true && (isSetAnnotations());
    list.add(present_annotations);
    if (present_annotations)
      list.add(annotations);

    boolean present_flag = true && (isSetFlag());
    list.add(present_flag);
    if (present_flag)
      list.add(flag);

    boolean present_err = true && (isSetErr());
    list.add(present_err);
    if (present_err)
      list.add(err);

    boolean present_spanEventList = true && (isSetSpanEventList());
    list.add(present_spanEventList);
    if (present_spanEventList)
      list.add(spanEventList);

    boolean present_apiId = true && (isSetApiId());
    list.add(present_apiId);
    if (present_apiId)
      list.add(apiId);

    boolean present_rpc = true && (isSetRpc());
    list.add(present_rpc);
    if (present_rpc)
      list.add(rpc);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPassiveSpan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPassiveSpanId()).compareTo(other.isSetPassiveSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassiveSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passiveSpanId, other.passiveSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentType()).compareTo(other.isSetAgentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentType, other.agentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentStartTime()).compareTo(other.isSetAgentStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentStartTime, other.agentStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProxyFrontEndSpanId()).compareTo(other.isSetProxyFrontEndSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProxyFrontEndSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxyFrontEndSpanId, other.proxyFrontEndSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProxyBackEndSpanId()).compareTo(other.isSetProxyBackEndSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProxyBackEndSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxyBackEndSpanId, other.proxyBackEndSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionId()).compareTo(other.isSetTransactionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionId, other.transactionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElapsed()).compareTo(other.isSetElapsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElapsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elapsed, other.elapsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndPoint()).compareTo(other.isSetEndPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endPoint, other.endPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAddr()).compareTo(other.isSetRemoteAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAddr, other.remoteAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(other.isSetAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotations, other.annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanEventList()).compareTo(other.isSetSpanEventList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanEventList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanEventList, other.spanEventList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiId()).compareTo(other.isSetApiId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiId, other.apiId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRpc()).compareTo(other.isSetRpc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpc, other.rpc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPassiveSpan(");
    boolean first = true;

    sb.append("passiveSpanId:");
    sb.append(this.passiveSpanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentType:");
    sb.append(this.agentType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentStartTime:");
    sb.append(this.agentStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("proxyFrontEndSpanId:");
    sb.append(this.proxyFrontEndSpanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("proxyBackEndSpanId:");
    sb.append(this.proxyBackEndSpanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactionId:");
    if (this.transactionId == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.transactionId, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (isSetElapsed()) {
      if (!first) sb.append(", ");
      sb.append("elapsed:");
      sb.append(this.elapsed);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("serviceType:");
    sb.append(this.serviceType);
    first = false;
    if (isSetEndPoint()) {
      if (!first) sb.append(", ");
      sb.append("endPoint:");
      if (this.endPoint == null) {
        sb.append("null");
      } else {
        sb.append(this.endPoint);
      }
      first = false;
    }
    if (isSetRemoteAddr()) {
      if (!first) sb.append(", ");
      sb.append("remoteAddr:");
      if (this.remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAddr);
      }
      first = false;
    }
    if (isSetAnnotations()) {
      if (!first) sb.append(", ");
      sb.append("annotations:");
      if (this.annotations == null) {
        sb.append("null");
      } else {
        sb.append(this.annotations);
      }
      first = false;
    }
    if (isSetFlag()) {
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
    }
    if (isSetErr()) {
      if (!first) sb.append(", ");
      sb.append("err:");
      sb.append(this.err);
      first = false;
    }
    if (isSetSpanEventList()) {
      if (!first) sb.append(", ");
      sb.append("spanEventList:");
      if (this.spanEventList == null) {
        sb.append("null");
      } else {
        sb.append(this.spanEventList);
      }
      first = false;
    }
    if (isSetApiId()) {
      if (!first) sb.append(", ");
      sb.append("apiId:");
      sb.append(this.apiId);
      first = false;
    }
    if (isSetRpc()) {
      if (!first) sb.append(", ");
      sb.append("rpc:");
      if (this.rpc == null) {
        sb.append("null");
      } else {
        sb.append(this.rpc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPassiveSpanStandardSchemeFactory implements SchemeFactory {
    public TPassiveSpanStandardScheme getScheme() {
      return new TPassiveSpanStandardScheme();
    }
  }

  private static class TPassiveSpanStandardScheme extends StandardScheme<TPassiveSpan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPassiveSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PASSIVE_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.passiveSpanId = iprot.readI64();
              struct.setPassiveSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.agentType = iprot.readI16();
              struct.setAgentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGENT_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.agentStartTime = iprot.readI64();
              struct.setAgentStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROXY_FRONT_END_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.proxyFrontEndSpanId = iprot.readI64();
              struct.setProxyFrontEndSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROXY_BACK_END_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.proxyBackEndSpanId = iprot.readI64();
              struct.setProxyBackEndSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transactionId = iprot.readBinary();
              struct.setTransactionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ELAPSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.elapsed = iprot.readI32();
              struct.setElapsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serviceType = iprot.readI16();
              struct.setServiceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // END_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endPoint = iprot.readString();
              struct.setEndPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMOTE_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteAddr = iprot.readString();
              struct.setRemoteAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ANNOTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.annotations = new ArrayList<TAnnotation>(_list32.size);
                TAnnotation _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new TAnnotation();
                  _elem33.read(iprot);
                  struct.annotations.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setAnnotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.flag = iprot.readI16();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ERR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.err = iprot.readI32();
              struct.setErrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SPAN_EVENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.spanEventList = new ArrayList<TSpanEvent>(_list35.size);
                TSpanEvent _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new TSpanEvent();
                  _elem36.read(iprot);
                  struct.spanEventList.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setSpanEventListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // API_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.apiId = iprot.readI32();
              struct.setApiIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RPC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpc = iprot.readString();
              struct.setRpcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPassiveSpan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PASSIVE_SPAN_ID_FIELD_DESC);
      oprot.writeI64(struct.passiveSpanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGENT_TYPE_FIELD_DESC);
      oprot.writeI16(struct.agentType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGENT_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.agentStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROXY_FRONT_END_SPAN_ID_FIELD_DESC);
      oprot.writeI64(struct.proxyFrontEndSpanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROXY_BACK_END_SPAN_ID_FIELD_DESC);
      oprot.writeI64(struct.proxyBackEndSpanId);
      oprot.writeFieldEnd();
      if (struct.transactionId != null) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        oprot.writeBinary(struct.transactionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      if (struct.isSetElapsed()) {
        oprot.writeFieldBegin(ELAPSED_FIELD_DESC);
        oprot.writeI32(struct.elapsed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
      oprot.writeI16(struct.serviceType);
      oprot.writeFieldEnd();
      if (struct.endPoint != null) {
        if (struct.isSetEndPoint()) {
          oprot.writeFieldBegin(END_POINT_FIELD_DESC);
          oprot.writeString(struct.endPoint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remoteAddr != null) {
        if (struct.isSetRemoteAddr()) {
          oprot.writeFieldBegin(REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.remoteAddr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.annotations != null) {
        if (struct.isSetAnnotations()) {
          oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.annotations.size()));
            for (TAnnotation _iter38 : struct.annotations)
            {
              _iter38.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFlag()) {
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI16(struct.flag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetErr()) {
        oprot.writeFieldBegin(ERR_FIELD_DESC);
        oprot.writeI32(struct.err);
        oprot.writeFieldEnd();
      }
      if (struct.spanEventList != null) {
        if (struct.isSetSpanEventList()) {
          oprot.writeFieldBegin(SPAN_EVENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spanEventList.size()));
            for (TSpanEvent _iter39 : struct.spanEventList)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetApiId()) {
        oprot.writeFieldBegin(API_ID_FIELD_DESC);
        oprot.writeI32(struct.apiId);
        oprot.writeFieldEnd();
      }
      if (struct.rpc != null) {
        if (struct.isSetRpc()) {
          oprot.writeFieldBegin(RPC_FIELD_DESC);
          oprot.writeString(struct.rpc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPassiveSpanTupleSchemeFactory implements SchemeFactory {
    public TPassiveSpanTupleScheme getScheme() {
      return new TPassiveSpanTupleScheme();
    }
  }

  private static class TPassiveSpanTupleScheme extends TupleScheme<TPassiveSpan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPassiveSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPassiveSpanId()) {
        optionals.set(0);
      }
      if (struct.isSetAgentType()) {
        optionals.set(1);
      }
      if (struct.isSetAgentStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetProxyFrontEndSpanId()) {
        optionals.set(3);
      }
      if (struct.isSetProxyBackEndSpanId()) {
        optionals.set(4);
      }
      if (struct.isSetTransactionId()) {
        optionals.set(5);
      }
      if (struct.isSetStartTime()) {
        optionals.set(6);
      }
      if (struct.isSetElapsed()) {
        optionals.set(7);
      }
      if (struct.isSetServiceType()) {
        optionals.set(8);
      }
      if (struct.isSetEndPoint()) {
        optionals.set(9);
      }
      if (struct.isSetRemoteAddr()) {
        optionals.set(10);
      }
      if (struct.isSetAnnotations()) {
        optionals.set(11);
      }
      if (struct.isSetFlag()) {
        optionals.set(12);
      }
      if (struct.isSetErr()) {
        optionals.set(13);
      }
      if (struct.isSetSpanEventList()) {
        optionals.set(14);
      }
      if (struct.isSetApiId()) {
        optionals.set(15);
      }
      if (struct.isSetRpc()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPassiveSpanId()) {
        oprot.writeI64(struct.passiveSpanId);
      }
      if (struct.isSetAgentType()) {
        oprot.writeI16(struct.agentType);
      }
      if (struct.isSetAgentStartTime()) {
        oprot.writeI64(struct.agentStartTime);
      }
      if (struct.isSetProxyFrontEndSpanId()) {
        oprot.writeI64(struct.proxyFrontEndSpanId);
      }
      if (struct.isSetProxyBackEndSpanId()) {
        oprot.writeI64(struct.proxyBackEndSpanId);
      }
      if (struct.isSetTransactionId()) {
        oprot.writeBinary(struct.transactionId);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetElapsed()) {
        oprot.writeI32(struct.elapsed);
      }
      if (struct.isSetServiceType()) {
        oprot.writeI16(struct.serviceType);
      }
      if (struct.isSetEndPoint()) {
        oprot.writeString(struct.endPoint);
      }
      if (struct.isSetRemoteAddr()) {
        oprot.writeString(struct.remoteAddr);
      }
      if (struct.isSetAnnotations()) {
        {
          oprot.writeI32(struct.annotations.size());
          for (TAnnotation _iter40 : struct.annotations)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetFlag()) {
        oprot.writeI16(struct.flag);
      }
      if (struct.isSetErr()) {
        oprot.writeI32(struct.err);
      }
      if (struct.isSetSpanEventList()) {
        {
          oprot.writeI32(struct.spanEventList.size());
          for (TSpanEvent _iter41 : struct.spanEventList)
          {
            _iter41.write(oprot);
          }
        }
      }
      if (struct.isSetApiId()) {
        oprot.writeI32(struct.apiId);
      }
      if (struct.isSetRpc()) {
        oprot.writeString(struct.rpc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPassiveSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.passiveSpanId = iprot.readI64();
        struct.setPassiveSpanIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.agentType = iprot.readI16();
        struct.setAgentTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agentStartTime = iprot.readI64();
        struct.setAgentStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.proxyFrontEndSpanId = iprot.readI64();
        struct.setProxyFrontEndSpanIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.proxyBackEndSpanId = iprot.readI64();
        struct.setProxyBackEndSpanIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.transactionId = iprot.readBinary();
        struct.setTransactionIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.elapsed = iprot.readI32();
        struct.setElapsedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.serviceType = iprot.readI16();
        struct.setServiceTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.endPoint = iprot.readString();
        struct.setEndPointIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remoteAddr = iprot.readString();
        struct.setRemoteAddrIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.annotations = new ArrayList<TAnnotation>(_list42.size);
          TAnnotation _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = new TAnnotation();
            _elem43.read(iprot);
            struct.annotations.add(_elem43);
          }
        }
        struct.setAnnotationsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.flag = iprot.readI16();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(13)) {
        struct.err = iprot.readI32();
        struct.setErrIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spanEventList = new ArrayList<TSpanEvent>(_list45.size);
          TSpanEvent _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new TSpanEvent();
            _elem46.read(iprot);
            struct.spanEventList.add(_elem46);
          }
        }
        struct.setSpanEventListIsSet(true);
      }
      if (incoming.get(15)) {
        struct.apiId = iprot.readI32();
        struct.setApiIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rpc = iprot.readString();
        struct.setRpcIsSet(true);
      }
    }
  }

}

