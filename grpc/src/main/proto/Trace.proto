syntax = "proto3";

import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "com.navercorp.pinpoint.grpc.trace";
option java_outer_classname = "TraceProto";
//option objc_class_prefix = "PIN";

package v1;

service Trace {
    rpc SendSpan (stream PSpan) returns (google.protobuf.Empty) {
    }

    rpc SendSpanChunk (stream PSpanChunk) returns (google.protobuf.Empty) {
    }
}

message PAgent {
    string agentId = 1;
    string applicationName = 2;
    int64 agentStartTime = 3;
}

message PSpan {
    int32 version = 1;

    // identical to agentId if null
    //4: optional string traceAgentId
    //5: i64 traceAgentStartTime;
    //6: i64 traceTransactionSequence;
    bytes transactionId = 2;

    fixed64 spanId = 3;
    fixed64 parentSpanId = 4;

    // span event's startTimestamp
    int64 startTime = 5;
    int32 elapsed = 6;
    int32 apiId = 7;

    int32 serviceType = 8;

    PAcceptEvent acceptEvent = 9;

    repeated PAnnotation annotations = 10;

    int32 flag = 11;
    sint32 err = 12;

    repeated PSpanEvent spanEventList = 13;

    PIntStringValue exceptionInfo = 14;

    int32 applicationServiceType = 15;
    int32 loggingTransactionInfo = 16;
}

message PAcceptEvent {
    string rpc = 1;
    string endPoint = 2;
    string remoteAddr = 3;
    PParentInfo parentInfo = 4;
}

message PParentInfo {
    string parentApplicationName = 1;
    int32 parentApplicationType = 2;
    string acceptorHost = 3;
}

message PLocalAsyncId {
    int32 asyncId = 1;
    int32 sequence = 2;
}


message PSpanEvent {
    int32 sequence = 1;
    int32 depth = 2;

    int32 startElapsed = 3;
    int32 endElapsed = 4;

    sint32 serviceType = 5;

    repeated PAnnotation annotations = 6;

    sint32 apiId = 10;
    PIntStringValue exceptionInfo = 11;

    PNextEvent nextEvent = 12;
}

message PNextEvent {
    oneof field {
        int32 asyncEvent = 1;
        PMessageEvent messageEvent = 2;
    }
}

message PMessageEvent {
    fixed64 nextSpanId = 1;
    string endPoint = 2;
    string destinationId = 3;
}

message PSpanChunk {
    int32 version = 1;
    PAgent agent = 2;

    // identical to agentId if null
    //5: optional string traceAgentId
    //6: i64 traceAgentStartTime;
    //7: i64 traceTransactionSequence;
    bytes transactionId = 3;

    fixed64 spanId = 4;

    string endPoint = 5;

    repeated PSpanEvent spanEventList = 6;

    int32 applicationServiceType = 7;

    int64 keyTime = 8;

    PLocalAsyncId localAsyncId = 9;

}

// 1.6.x- : version = 0;
// 1.7.x+ : version = 1;
//const i8 TRACE_V1 = 0;
//const i8 TRACE_V2 = 1;
//
message PIntStringValue {
    int32 intValue = 1;
    string stringValue = 2;
}

message PIntStringStringValue {
    int32 intValue = 1;
    string stringValue1 = 2;
    string stringValue2 = 3;
}

message PLongIntIntByteByteStringValue {
    int64 longValue = 1;
    int32 intValue1 = 2;
    int32 intValue2 = 3;
    sint32 byteValue1 = 4;
    sint32 byteValue2 = 5;
    string stringValue = 6;
}

message PIntBooleanIntBooleanValue {
    int32 intValue1 = 1;
    bool boolValue1 = 2;
    int32 intValue2 = 3;
    bool boolValue2 = 4;
}

message PStringStringValue {
    string stringValue1 = 1;
    string stringValue2 = 2;
}

message PAnnotationValue {
    oneof field {
        string stringValue = 1;
        bool boolValue = 2;
        int32 intValue = 3;
        int64 longValue = 4;
        // for compatibility
        sint32 shortValue = 5;
        double doubleValue = 6;
        bytes binaryValue = 7;
        // for compatibility
        sint32 byteValue = 8;
        PIntStringValue intStringValue = 9;
        PStringStringValue stringStringValue = 10;
        PIntStringStringValue intStringStringValue = 11;
        PLongIntIntByteByteStringValue longIntIntByteByteStringValue = 12;
        PIntBooleanIntBooleanValue intBooleanIntBooleanValue = 13;
    }
}

message PAnnotation {
    int32 key = 1;
    PAnnotationValue value = 2;
}

message PResult {
    bool success = 1;
    string message = 2;
}

message PSqlMetaData {
    string agentId = 1;
    int64 agentStartTime = 2;
    int32 sqlId = 4;
    string sql = 5;
}

message PApiMetaData {
    string agentId = 1;
    int64 agentStartTime = 2;
    int32 apiId = 4;
    string apiInfo = 5;
    int32 line = 6;
    int32 type = 10;
}

message PStringMetaData {
    string agentId = 1;
    int64 agentStartTime = 2;
    int32 stringId = 4;
    string stringValue = 5;
}


//struct TSpanEvent {
//
//    7: optional i64 spanId
//    8: i16 sequence
//
//    // 1.6.x- : delta of the span startTime
//    // 1.7.0+: delta of startTime of previous SpanEvent
//    //         If SpanEvent is the first SpanEvent, startElapsed is span startTime
//    9: i32 startElapsed = 0;
//
//    10: optional i32 endElapsed = 0
//
//    11: optional string rpc
//    12: i16 serviceType
//    13: optional string endPoint
//
//    14: optional list<TAnnotation> annotations
//
//    15: optional i32 depth = -1
//    16: optional i64 nextSpanId = -1
//
//    20: optional string destinationId
//
//    25: optional i32 apiId;
//    26: optional TIntStringValue exceptionInfo;
//
//    30: optional i32 asyncId;
//    31: optional i32 nextAsyncId;
//    32: optional i16 asyncSequence;
//}
//
//struct TSpan {
//
//    1: string agentId
//    2: string applicationName
//    3: i64 agentStartTime
//
//    // identical to agentId if null
//    //4: optional string traceAgentId
//    //5: i64 traceAgentStartTime;
//    //6: i64 traceTransactionSequence;
//    4: binary  transactionId;
//
//    7: i64 spanId
//    8: optional i64 parentSpanId = -1
//
//    // span event's startTimestamp
//    9: i64 startTime
//    10: optional i32 elapsed = 0
//
//    11: optional string rpc
//
//    12: i16 serviceType
//    13: optional string endPoint
//    14: optional string remoteAddr
//
//    15: optional list<TAnnotation> annotations
//    16: optional i16 flag = 0
//
//    17: optional i32 err
//
//    18: optional list<TSpanEvent> spanEventList
//
//    19: optional string parentApplicationName
//    20: optional i16 parentApplicationType
//    21: optional string acceptorHost
//
//    25: optional i32 apiId;
//    26: optional TIntStringValue exceptionInfo;
//
//    30: optional i16 applicationServiceType;
//    31: optional i8 loggingTransactionInfo;
//
//    32: optional i8 version = TRACE_V2;
//}
//
//message PSpanChunk {
//    PAgent agent = 2;
//
//    // @deprecate (1.7.0)
//    4: i16 serviceType ( deprecated )
//
//    // identical to agentId if null
//    //5: optional string traceAgentId
//    //6: i64 traceAgentStartTime;
//    //7: i64 traceTransactionSequence;
//    5: binary  transactionId;
//
//    8: i64 spanId
//
//    9: optional string endPoint
//
//    10: list<TSpanEvent> spanEventList
//
//    11: optional i16 applicationServiceType
//
//    // @since 1.7.0 time for data compression
//    12: optional i64 keyTime;
//
//    13: optional i8 version = TRACE_V2;
//}
//
//
//struct TStringMetaData {
//
//    1: string agentId
//    2: i64 agentStartTime
//
//    4: i32 stringId
//    5: string stringValue;
//}
//
//struct TSqlMetaData {
//
//    1: string agentId
//    2: i64 agentStartTime
//
//    4: i32 sqlId
//    5: string sql;
//}
//
//
//struct TApiMetaData {
//    1: string agentId
//    2: i64 agentStartTime
//
//    4: i32 apiId,
//    5: string apiInfo,
//    6: optional i32 line,
//
//    10: optional i32 type;
//}
//
//struct TResult {
//    1: bool success
//    2: optional string message
//}